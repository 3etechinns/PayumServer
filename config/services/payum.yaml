imports:
    - { resource: "@PayumBundle/Resources/config/payum.xml" }
    - { resource: "@PayumBundle/Resources/config/form.xml" }

parameters:
    genericTokenFactoryPaths:
        capture: "%payum.capture_path%"
        notify: "%payum.notify_path%"
        authorize: "%payum.authorize_path%"
        refund: "%payum.refund_path%"
        cancel: "%payum.cancel_path%"
        payout: "%payum.payout_path%"

    payum.template.obtain_missing_details: "%kernel.project_dir%/src/Resources/views/obtainMissingDetails.html.twig"
    payum.paths:
        PayumServer: "%kernel.project_dir%/src/Resources/views"

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.


    payum.yadm_gateway_config_storage:
        public: true
        class: Payum\Core\Storage\StorageInterface
        factory: ['App\Factory\GatewayConfigStorageFactory', create]
        arguments:
            - '@payum.gateway_config_storage'

    payum.gateway_config_storage: '@payum.storage._app_model_gatewayconfig'

    api.view.gateway_config_to_json_converter:
        class: App\Api\View\GatewayConfigToJsonConverter

    payum.gateway_schema_builder:
        class: App\Schema\GatewaySchemaBuilder
        arguments:
            - '@payum'

    App\JsonDecode: '@payum.json_decode'
    payum.json_decode:
        class: App\JsonDecode

    Payum\Core\Payum: '@payum'

    payum.builder:
        public: true
        class: Payum\Core\PayumBuilder
        calls:
            - method: addStorage
              arguments:
                  - 'App\Model\Payment'
                  - '@payum.storage.app_model_payment'
            - method: addStorage
              arguments:
                  - 'App\Model\GatewayConfig'
                  - '@payum.storage.app_model_gatewayconfig'
            - method: addStorage
              arguments:
                  - 'App\Model\SecurityToken'
                  - '@payum.storage.app_model_securitytoken'
            - method: setGatewayConfigStorage
              arguments:
                  - '@payum.yadm_gateway_config_storage'
            - method: setMainRegistry
              arguments:
                  - '@payum.static_registry'
            - method: setHttpRequestVerifier
              arguments:
                  - '@payum.http_request_verifier_builder'
            - method: setTokenFactory
              arguments:
                  - '@payum.token_factory_builder'
            - method: setTokenStorage
              arguments:
                  - '@payum.storage.app_model_securitytoken'
            - method: setGenericTokenFactoryPaths
              arguments:
                  - '%genericTokenFactoryPaths%'
            - method: setCoreGatewayFactory
              arguments:
                  - '@payum.core_gateway_factory_builder'
            - method: addCoreGatewayFactoryConfig
              arguments:
                  - '@payum.core_gateway_config_facade'

    payum.core_gateway_config_facade:
        class: array
        factory: ['App\Facade\CoreGatewayConfigFacade', get]
        arguments:
            - '@service_container'
            - '@form.factory'
            - '@twig'

    payum.security.token_storage: '@payum.storage._app_model_securitytoken'

    App\Storage\PaymentStorage: '@payum.storage._app_model_payment'
    payum.payment_storage: '@payum.storage._app_model_payment'

    App\Schema\PaymentSchemaBuilder: '@payum.payment_schema_builder'
    payum.payment_schema_builder:
        class: App\Schema\PaymentSchemaBuilder
        arguments:
            - '@payum.yadm_gateway_config_storage'

    payum.payment_form_definition_builder:
        class: App\Schema\PaymentFormDefinitionBuilder
        arguments:
            - '@payum.yadm_gateway_config_storage'

    App\Schema\TokenSchemaBuilder: '@payum.token_schema_builder'
    payum.token_schema_builder:
        class: App\Schema\TokenSchemaBuilder

    App\Api\View\PaymentToJsonConverter: '@api.view.payment_to_json_converter'
    api.view.payment_to_json_converter:
        class: App\Api\View\PaymentToJsonConverter
        arguments:
            - '@payum'

    App\Api\View\TokenToJsonConverter: '@api.view.token_to_json_converter'
    api.view.token_to_json_converter:
        class: App\Api\View\TokenToJsonConverter

    payum.core_gateway_factory_builder:
        public: true
        class: Payum\Core\Bridge\Symfony\Builder\CoreGatewayFactoryBuilder
        calls:
            - [setContainer, ['@service_container']]

    payum.gateway_form_definition_builder:
        class: App\Schema\GatewayFormDefinitionBuilder
        arguments:
            - '@payum'

    payum.gateway_factory_choices_callback:
        class: callback
        factory: ['App\Factory\GatewayFactoryChoicesCallbackFactory', create]
        arguments:
            - '@service_container'

    payum.reply_to_json_response_converter:
        class: App\ReplyToJsonResponseConverter

    # controller gateways
    payum.api.controller.gateway:
        class: App\Api\Controller\GatewayController
        public: true
        arguments:
            - '@Symfony\Component\Routing\Generator\UrlGeneratorInterface'
            - '@payum.yadm_gateway_config_storage'
            - '@api.view.gateway_config_to_json_converter'
            - '@payum.gateway_schema_builder'
            - '@payum.json_decode'

    # controller schema gateways
    payum.schema.controller.gateways:
        class: App\Schema\Controller\GatewaySchemaController
        public: true
        arguments:
            - '@payum.gateway_schema_builder'
            - '@payum.gateway_form_definition_builder'

    # controller schema payments
    payum.schema.controller.payments:
        class: App\Schema\Controller\PaymentSchemaController
        public: true
        arguments:
            - '@payum.payment_schema_builder'
            - '@payum.payment_form_definition_builder'

    # controller schema tokens
    payum.schema.controller.tokens:
        class: App\Schema\Controller\TokenSchemaController
        public: true
        arguments:
            - '@payum.token_schema_builder'

    # controller payment
    payum.api.controller.payment:
        class: App\Api\Controller\PaymentController
        public: true

    # controller payment
    payum.api.controller.token:
        class: App\Api\Controller\TokenController
        public: true

    # event request
    payum.listener.choose_gateway:
        class: App\EventListener\Request\GatewayChooserListener
        tags:
            - { name: kernel.event_subscriber }

#    # form extension
#    App\Form\Extension\CreditCardExtension:
#        tags:
#            - { name: form.type_extension, extended_type: Symfony\Component\Form\Extension\Core\Type\FormType }

    # form type
    payum.form.type.gateway_choice:
        class: Payum\Core\Bridge\Symfony\Form\Type\GatewayChoiceType
        arguments:
            - '@payum.gateway_choices_callback'
        tags:
            - { name: form.type }
    App\Form\Type\ChooseGatewayType: '@payum.server.form.type.choose_gateway_type'
    payum.server.form.type.choose_gateway_type:
        class: App\Form\Type\ChooseGatewayType
        arguments:
            - '@payum.gateway_choices_callback'

    App\Factory\GatewayChoicesCallbackFactory: '@payum.gateway_choices_callback'
    payum.gateway_choices_callback:
        class: callback
        factory: ['App\Factory\GatewayChoicesCallbackFactory', create]
        arguments:
            - '@service_container'